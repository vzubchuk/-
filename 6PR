import numpy as np
def lagrange_interpolation(x, y, x_test):
    n = len(x)
    p = np.zeros_like(x_test, dtype=float) # масив для зберігання значень багаточленів L_i

    for i in range(n):
        p_i = 1.0
        for j in range(n):
            if i != j:
                p_i *= (x_test - x[j]) / (x[i] - x[j])
        p += y[i] * p_i
    return p
# Задайте ваші точки (x, y)
x=np.array([-3.,-2.,1.,3.], dtype=float) 
y=np.array([-4.,19.,-8.,14.], dtype=float)

# Точки, в яких потрібно обчислити значення
x_test = np.array([-1.5,0.5,1.5, 2.0], dtype=float)
# Обчислюємо інтерполяційний багаточлен та його значення у точках x_test
f_interp = lagrange_interpolation(x, y, x_test)
print("Значення функції у точках x_test =", f_interp.round(4))

xnew=np.linspace(np.min(x),np.max(x),100) #точки, за якими будуємо графік
ynew=[lagrange_interpolation(x,y,i) for i in xnew]
plt.plot(x,y,'o',xnew,ynew) #будуємо графік функції Лагранжа
plt.title('Lagrange Polynomial_1')
plt.grid(True)
plt.show() 
 
#Перевірка 
f = lagrange(x, y)
fig = plt.figure(figsize = (7,5))
plt.plot(xnew, f(xnew), 'b', x, y, 'ro')
plt.title('Lagrange Polynomial_2')
plt.grid()
plt.xlabel('x')
plt.ylabel('y')
plt.show()
