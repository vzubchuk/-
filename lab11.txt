#2 Метод прямокутників

from scipy import integrate 
import numpy as np
eps = 0.001
a = 1.4
b = 2.1
n = 10

def f1(x): 
    return x/np.sqrt(3*x - 1)
def left_rec(f1,a,b,n): 
    h=(b-a)/n 
    sum=0 
    for i in range(0,n): 
        sum+=f1(a+i*h) 
    return sum*h 

v,err = integrate.quad(f1,a,b)#Перевірка
#Перевірка точності за правилом Рунге:
if abs(left_rec(f1,a,b,2*n) - left_rec(f1,a,b,n))/3. <=eps:
    print("left rectangle:",round (left_rec(f1,a,b,n), 5)) 
def right_rec(f1,a,b,n): 
    h=(b-a)/n 
    sum=0 
    for i in range(1,n+1): 
        sum+=f1(a+i*h) 
    return sum*h 
print("right rectangle:",round (right_rec(f1,a,b,10), 5)) 
def aver_rec(f1,a,b,n): 
    h=0.08 
    sum=0 
    for i in range(0,n): 
        sum+=f1(a+i*h) 
    return sum*h 
print("average rectangle:",round (aver_rec(f1,a,b,10), 5)) 
print("Check for the rectangle method= ",round (v, 5))

#3 Метод прямокутників

from scipy import integrate 
import numpy as np

# Задаємо функцію, яку необхідно інтегрувати
def f(x):
    return np.log10((x**2 + 1))/x

# Задаємо межі інтегрування та початкову кількість розбиттів
a = 0.8
b = 1.6
n = 8

# Обчислюємо значення інтегралу методом Симпсона
def simpson_rule(f, a, b, n):
    h = (b - a) / n 
    integr = f(a) + f(b) 
    for i in range(1,n): 
        k = a + i*h 
        if i%2 == 0: 
            integr += 2 * f(k) 
        else: 
            integr += 4 * f(k) 
    integr *= h/3 
    return integr 

# Обчислюємо значення інтегралу методом Сімпсона з точністю 0.001
integral1 = simpson_rule(f, a, b, n)
n *= 2
integral2 = simpson_rule(f, a, b, n)
while abs(integral2 - integral1) / 15 > 0.001:
    integral1 = integral2
    n *= 2
    integral2 = simpson_rule(f, a, b, n)
# Виводимо результат
print("Simpsone method:", round(integral2, 3))

v,err = integrate.quad(f,a,b)#Перевірка 
print("Check for the simpsone method= ",round(v, 3))

#4 Метод трапецій

from scipy import integrate 
import numpy as np

# Задаємо функцію, яку необхідно інтегрувати
def f(x):
    return x/np.sqrt(0.2*x**2 + 1)

# Задаємо межі інтегрування та початкову кількість розбиттів
a = 1.3
b = 2.5
n = 20

# Обчислюємо значення інтегралу методом трапецій
def trapezoidal_rule(f, a, b, n):
    h = (b - a) / n
    x = a
    sum = 0
    for i in range(1, n):
        x += h
        sum += 2 * f(x)
    sum += f(b)
    integral = h / 2 * sum

    return integral

# Обчислюємо значення інтегралу методом трапецій з точністю 0.001
#Перевірка точності за правилом Рунге
integral1 = trapezoidal_rule(f, a, b, n)
n *= 2
integral2 = trapezoidal_rule(f, a, b, n)
while abs(integral2 - integral1) / 3 > 0.001:
    integral1 = integral2
    n *= 2
    integral2 = trapezoidal_rule(f, a, b, n)

# Виводимо результат
print("Trapetzia methodof:", round(integral2, 3))

v,err = integrate.quad(f,3.2,4) #Перевірка
print("Check for the trapetzia method= ",round(v, 5))






















